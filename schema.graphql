"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Crew`."""
  crews(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Crew`."""
    orderBy: [CrewsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CrewCondition
  ): CrewsConnection

  """Reads and enables pagination through a set of `Event`."""
  events(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition
  ): EventsConnection

  """Reads and enables pagination through a set of `EventVideo`."""
  eventVideos(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EventVideo`."""
    orderBy: [EventVideosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventVideoCondition
  ): EventVideosConnection

  """Reads and enables pagination through a set of `FlywaySchemaHistory`."""
  flywaySchemaHistories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FlywaySchemaHistory`."""
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FlywaySchemaHistoryCondition
  ): FlywaySchemaHistoriesConnection

  """Reads and enables pagination through a set of `Member`."""
  members(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MemberCondition
  ): MembersConnection

  """Reads and enables pagination through a set of `Status`."""
  statuses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Status`."""
    orderBy: [StatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatusCondition
  ): StatusesConnection

  """Reads and enables pagination through a set of `Video`."""
  videos(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Video`."""
    orderBy: [VideosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VideoCondition
  ): VideosConnection
  crew(videoId: UUID!, memberId: UUID!, position: String!): Crew
  event(id: UUID!): Event
  eventByUrl(url: String!): Event
  eventByTitle(title: String!): Event
  eventVideo(eventId: UUID!, videoId: UUID!): EventVideo
  flywaySchemaHistory(installedRank: Int!): FlywaySchemaHistory
  member(id: UUID!): Member
  memberByUrl(url: String!): Member
  memberByName(name: String!): Member
  status(name: String!): Status
  video(id: UUID!): Video
  videoByUrl(url: String!): Video
  videoByTitle(title: String!): Video

  """Reads a single `Crew` using its globally unique `ID`."""
  crewByNodeId(
    """The globally unique `ID` to be used in selecting a single `Crew`."""
    nodeId: ID!
  ): Crew

  """Reads a single `Event` using its globally unique `ID`."""
  eventByNodeId(
    """The globally unique `ID` to be used in selecting a single `Event`."""
    nodeId: ID!
  ): Event

  """Reads a single `EventVideo` using its globally unique `ID`."""
  eventVideoByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `EventVideo`.
    """
    nodeId: ID!
  ): EventVideo

  """Reads a single `FlywaySchemaHistory` using its globally unique `ID`."""
  flywaySchemaHistoryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `FlywaySchemaHistory`.
    """
    nodeId: ID!
  ): FlywaySchemaHistory

  """Reads a single `Member` using its globally unique `ID`."""
  memberByNodeId(
    """The globally unique `ID` to be used in selecting a single `Member`."""
    nodeId: ID!
  ): Member

  """Reads a single `Status` using its globally unique `ID`."""
  statusByNodeId(
    """The globally unique `ID` to be used in selecting a single `Status`."""
    nodeId: ID!
  ): Status

  """Reads a single `Video` using its globally unique `ID`."""
  videoByNodeId(
    """The globally unique `ID` to be used in selecting a single `Video`."""
    nodeId: ID!
  ): Video
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Crew` values."""
type CrewsConnection {
  """A list of `Crew` objects."""
  nodes: [Crew!]!

  """
  A list of edges which contains the `Crew` and cursor to aid in pagination.
  """
  edges: [CrewsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Crew` you could get from the connection."""
  totalCount: Int!
}

type Crew implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  videoId: UUID!
  memberId: UUID!
  position: String!

  """Reads a single `Video` that is related to this `Crew`."""
  video: Video

  """Reads a single `Member` that is related to this `Crew`."""
  member: Member
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

type Video implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  url: String!
  title: String!
  description: String!
  uploadedAt: Date!
  visible: Boolean!
  createdAt: Datetime
  updatedAt: Datetime

  """Reads and enables pagination through a set of `Crew`."""
  crews(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Crew`."""
    orderBy: [CrewsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CrewCondition
  ): CrewsConnection!

  """Reads and enables pagination through a set of `EventVideo`."""
  eventVideos(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EventVideo`."""
    orderBy: [EventVideosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventVideoCondition
  ): EventVideosConnection!
}

"""The day, does not include a time."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Methods to use when ordering `Crew`."""
enum CrewsOrderBy {
  NATURAL
  VIDEO_ID_ASC
  VIDEO_ID_DESC
  MEMBER_ID_ASC
  MEMBER_ID_DESC
  POSITION_ASC
  POSITION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Crew` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CrewCondition {
  """Checks for equality with the object’s `videoId` field."""
  videoId: UUID

  """Checks for equality with the object’s `memberId` field."""
  memberId: UUID

  """Checks for equality with the object’s `position` field."""
  position: String
}

"""A connection to a list of `EventVideo` values."""
type EventVideosConnection {
  """A list of `EventVideo` objects."""
  nodes: [EventVideo!]!

  """
  A list of edges which contains the `EventVideo` and cursor to aid in pagination.
  """
  edges: [EventVideosEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EventVideo` you could get from the connection."""
  totalCount: Int!
}

type EventVideo implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  eventId: UUID!
  videoId: UUID!

  """Reads a single `Event` that is related to this `EventVideo`."""
  event: Event

  """Reads a single `Video` that is related to this `EventVideo`."""
  video: Video
}

type Event implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  url: String!
  title: String!
  description: String!
  date: Date!
  visible: Boolean!
  createdAt: Datetime
  updatedAt: Datetime

  """Reads and enables pagination through a set of `EventVideo`."""
  eventVideos(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EventVideo`."""
    orderBy: [EventVideosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventVideoCondition
  ): EventVideosConnection!
}

"""Methods to use when ordering `EventVideo`."""
enum EventVideosOrderBy {
  NATURAL
  EVENT_ID_ASC
  EVENT_ID_DESC
  VIDEO_ID_ASC
  VIDEO_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EventVideo` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EventVideoCondition {
  """Checks for equality with the object’s `eventId` field."""
  eventId: UUID

  """Checks for equality with the object’s `videoId` field."""
  videoId: UUID
}

"""A `EventVideo` edge in the connection."""
type EventVideosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventVideo` at the end of the edge."""
  node: EventVideo!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type Member implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  url: String!
  name: String!
  nickname: String!
  description: String!
  joinedAt: Date!
  role: String!
  status: String!
  archived: Boolean!
  createdAt: Datetime
  updatedAt: Datetime

  """Reads a single `Status` that is related to this `Member`."""
  statusByStatus: Status

  """Reads and enables pagination through a set of `Crew`."""
  crews(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Crew`."""
    orderBy: [CrewsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CrewCondition
  ): CrewsConnection!
}

type Status implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  name: String!

  """Reads and enables pagination through a set of `Member`."""
  membersByStatus(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MemberCondition
  ): MembersConnection!
}

"""A connection to a list of `Member` values."""
type MembersConnection {
  """A list of `Member` objects."""
  nodes: [Member!]!

  """
  A list of edges which contains the `Member` and cursor to aid in pagination.
  """
  edges: [MembersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Member` you could get from the connection."""
  totalCount: Int!
}

"""A `Member` edge in the connection."""
type MembersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Member` at the end of the edge."""
  node: Member!
}

"""Methods to use when ordering `Member`."""
enum MembersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  URL_ASC
  URL_DESC
  NAME_ASC
  NAME_DESC
  NICKNAME_ASC
  NICKNAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  JOINED_AT_ASC
  JOINED_AT_DESC
  ROLE_ASC
  ROLE_DESC
  STATUS_ASC
  STATUS_DESC
  ARCHIVED_ASC
  ARCHIVED_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Member` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MemberCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `url` field."""
  url: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `nickname` field."""
  nickname: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `joinedAt` field."""
  joinedAt: Date

  """Checks for equality with the object’s `role` field."""
  role: String

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `archived` field."""
  archived: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A `Crew` edge in the connection."""
type CrewsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Crew` at the end of the edge."""
  node: Crew!
}

"""A connection to a list of `Event` values."""
type EventsConnection {
  """A list of `Event` objects."""
  nodes: [Event!]!

  """
  A list of edges which contains the `Event` and cursor to aid in pagination.
  """
  edges: [EventsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Event` you could get from the connection."""
  totalCount: Int!
}

"""A `Event` edge in the connection."""
type EventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Event` at the end of the edge."""
  node: Event!
}

"""Methods to use when ordering `Event`."""
enum EventsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  URL_ASC
  URL_DESC
  TITLE_ASC
  TITLE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  DATE_ASC
  DATE_DESC
  VISIBLE_ASC
  VISIBLE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Event` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EventCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `url` field."""
  url: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `visible` field."""
  visible: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A connection to a list of `FlywaySchemaHistory` values."""
type FlywaySchemaHistoriesConnection {
  """A list of `FlywaySchemaHistory` objects."""
  nodes: [FlywaySchemaHistory!]!

  """
  A list of edges which contains the `FlywaySchemaHistory` and cursor to aid in pagination.
  """
  edges: [FlywaySchemaHistoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FlywaySchemaHistory` you could get from the connection.
  """
  totalCount: Int!
}

type FlywaySchemaHistory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  installedRank: Int!
  version: String
  description: String!
  type: String!
  script: String!
  checksum: Int
  installedBy: String!
  installedOn: Datetime!
  executionTime: Int!
  success: Boolean!
}

"""A `FlywaySchemaHistory` edge in the connection."""
type FlywaySchemaHistoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FlywaySchemaHistory` at the end of the edge."""
  node: FlywaySchemaHistory!
}

"""Methods to use when ordering `FlywaySchemaHistory`."""
enum FlywaySchemaHistoriesOrderBy {
  NATURAL
  INSTALLED_RANK_ASC
  INSTALLED_RANK_DESC
  VERSION_ASC
  VERSION_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ASC
  TYPE_DESC
  SCRIPT_ASC
  SCRIPT_DESC
  CHECKSUM_ASC
  CHECKSUM_DESC
  INSTALLED_BY_ASC
  INSTALLED_BY_DESC
  INSTALLED_ON_ASC
  INSTALLED_ON_DESC
  EXECUTION_TIME_ASC
  EXECUTION_TIME_DESC
  SUCCESS_ASC
  SUCCESS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FlywaySchemaHistory` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input FlywaySchemaHistoryCondition {
  """Checks for equality with the object’s `installedRank` field."""
  installedRank: Int

  """Checks for equality with the object’s `version` field."""
  version: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `script` field."""
  script: String

  """Checks for equality with the object’s `checksum` field."""
  checksum: Int

  """Checks for equality with the object’s `installedBy` field."""
  installedBy: String

  """Checks for equality with the object’s `installedOn` field."""
  installedOn: Datetime

  """Checks for equality with the object’s `executionTime` field."""
  executionTime: Int

  """Checks for equality with the object’s `success` field."""
  success: Boolean
}

"""A connection to a list of `Status` values."""
type StatusesConnection {
  """A list of `Status` objects."""
  nodes: [Status!]!

  """
  A list of edges which contains the `Status` and cursor to aid in pagination.
  """
  edges: [StatusesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Status` you could get from the connection."""
  totalCount: Int!
}

"""A `Status` edge in the connection."""
type StatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Status` at the end of the edge."""
  node: Status!
}

"""Methods to use when ordering `Status`."""
enum StatusesOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Status` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input StatusCondition {
  """Checks for equality with the object’s `name` field."""
  name: String
}

"""A connection to a list of `Video` values."""
type VideosConnection {
  """A list of `Video` objects."""
  nodes: [Video!]!

  """
  A list of edges which contains the `Video` and cursor to aid in pagination.
  """
  edges: [VideosEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Video` you could get from the connection."""
  totalCount: Int!
}

"""A `Video` edge in the connection."""
type VideosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Video` at the end of the edge."""
  node: Video!
}

"""Methods to use when ordering `Video`."""
enum VideosOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  URL_ASC
  URL_DESC
  TITLE_ASC
  TITLE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  UPLOADED_AT_ASC
  UPLOADED_AT_DESC
  VISIBLE_ASC
  VISIBLE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Video` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input VideoCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `url` field."""
  url: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `uploadedAt` field."""
  uploadedAt: Date

  """Checks for equality with the object’s `visible` field."""
  visible: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}
